
# resource "aws_iam_role" "userplatform_cpp_api_gateway_eventbridge_role" {
#   name = "userplatform_cpp_api_gateway_eventbridge_role"
#   # permissions_boundary = "arn:aws:iam::${var.account_id}:policy/tenant-${var.tenant_name}-boundary"
#
#   assume_role_policy = jsonencode({
#     Version = "2012-10-17",
#     Statement = [
#       {
#         Effect = "Allow",
#         Principal = {
#           Service = "apigateway.amazonaws.com"
#         },
#         Action = "sts:AssumeRole"
#       }
#     ]
#   })
# }
#
# resource "aws_iam_role_policy" "userplatform_cpp_api_gateway_eventbridge_policy" {
#   name = "userplatform_cpp_api_gateway_eventbridge_policy"
#   role = aws_iam_role.userplatform_cpp_api_gateway_eventbridge_role.id
#
#   policy = jsonencode({
#     Version = "2012-10-17",
#     Statement = [
#       {
#         Effect   = "Allow",
#         Action   = ["events:PutEvents"],
#         Resource = "*"
#       }
#     ]
#   })
# }
#
# # NOTE NOTE NOTE NOTE ****************
# resource "aws_iam_role" "userplatform_cpp_api_gateway_cloudwatch_logging_role" {
#   name = "userplatform_cpp_api_gateway_cloudwatch_logging_role"
#   # permissions_boundary = "arn:aws:iam::${var.account_id}:policy/tenant-${var.tenant_name}-boundary"
#
#   assume_role_policy = jsonencode({
#     Version = "2012-10-17",
#     Statement = [
#       {
#         Action = "sts:AssumeRole",
#         Principal = {
#           Service = "apigateway.amazonaws.com"
#         },
#         Effect = "Allow"
#       }
#     ]
#   })
# }
#
# resource "aws_iam_role_policy" "userplatform_cpp_api_gateway_cloudwatch_logging_policy" {
#   name = "userplatform_cpp_api_gateway_cloudwatch_logging_policy"
#   role = aws_iam_role.userplatform_cpp_api_gateway_cloudwatch_logging_role.id
#
#   policy = jsonencode({
#     Version = "2012-10-17",
#     Statement = [{
#       Effect = "Allow",
#       Action = [
#         "logs:CreateLogGroup",
#         "logs:CreateLogStream",
#         "logs:PutLogEvents",
#         "logs:DescribeLogGroups",
#         "logs:DescribeLogStreams",
#         "logs:GetLogEvents",
#         "logs:FilterLogEvents"
#       ],
#       Resource = "*"
#     }]
#   })
# }
#
# # REST API Gateway
# resource "aws_api_gateway_rest_api" "userplatform_cpp_rest_api" {
#   provider    = aws.us
#   name        = "userplatform-cpp-rest-api"
#   description = "REST API for Userplatform CPP Integration"
#   endpoint_configuration {
#     types = ["REGIONAL"]
#   }
# }
#
# # Create resources and methods for each route_path
# resource "aws_api_gateway_resource" "userplatform_cpp_api_resources" {
#   for_each = local.route_path
#
#   provider    = aws.us
#   rest_api_id = aws_api_gateway_rest_api.userplatform_cpp_rest_api.id
#   parent_id   = aws_api_gateway_rest_api.userplatform_cpp_rest_api.root_resource_id
#   path_part   = each.value
# }
#
# resource "aws_api_gateway_method" "userplatform_cpp_api_method" {
#   for_each = aws_api_gateway_resource.userplatform_cpp_api_resources
#
#   provider         = aws.us
#   rest_api_id      = aws_api_gateway_rest_api.userplatform_cpp_rest_api.id
#   resource_id      = each.value.id
#   http_method      = "POST"
#   authorization    = "NONE"
#   api_key_required = true
# }
#
# # resource "aws_api_gateway_integration" "userplatform_cpp_api_integration" {
# #   for_each = aws_api_gateway_resource.userplatform_cpp_api_resources
# #
# #   provider                = aws.us
# #   rest_api_id             = aws_api_gateway_rest_api.userplatform_cpp_rest_api.id
# #   resource_id             = each.value.id
# #   http_method             = aws_api_gateway_method.userplatform_cpp_api_method[each.key].http_method
# #   integration_http_method = "POST"
# #   type                    = "AWS"
# #   uri                     = "arn:aws:apigateway:us-east-1:events:action/PutEvents"
# #   credentials             = aws_iam_role.userplatform_cpp_api_gateway_eventbridge_role.arn
# #   passthrough_behavior    = "WHEN_NO_TEMPLATES"
# #
# #   request_parameters = {
# #     "integration.request.header.Content-Type" = "'application/json'"
# #   }
# #
# #   request_templates = {
# #     "application/json" = <<EOF
# #   {
# #     "Entries": [
# #       {
# #         "Source": "cpp-${each.key}-api",
# #         "DetailType": "cpp-event-${each.key}",
# #         "Detail": $input.body,
# #         "EventBusName": "${aws_cloudwatch_event_bus.userplatform_cpp_event_bus_us.name}"
# #       }
# #     ]
# #   }
# #   EOF
# #   }
# # }
#
# resource "aws_api_gateway_integration" "userplatform_cpp_api_integration" {
#   for_each = aws_api_gateway_resource.userplatform_cpp_api_resources
#
#   provider                = aws.us
#   rest_api_id             = aws_api_gateway_rest_api.userplatform_cpp_rest_api.id
#   resource_id             = each.value.id
#   http_method             = aws_api_gateway_method.userplatform_cpp_api_method[each.key].http_method
#   integration_http_method = "POST"
#   type                    = "AWS"
#   uri                     = "arn:aws:apigateway:us-east-1:events:path//"
#   credentials             = aws_iam_role.userplatform_cpp_api_gateway_eventbridge_role.arn
#   passthrough_behavior    = "WHEN_NO_TEMPLATES"
#   # passthrough_behavior = "WHEN_NO_MATCH"
#
#
#   # request_parameters = {
#   #   "integration.request.header.Content-Type" = "'application/json'"
#   # }
#
#   request_templates = {
#     "application/json" = <<EOF
# #set($market = $input.json('$.body.payload.fullDocument_payload.market'))
# #set($context.requestOverride.header.X-Amz-Target = "AWSEvents.PutEvents")
# #set($context.requestOverride.header.Content-Type = "application/x-amz-json-1.1")
#   {
#     "Entries": [
#       {
#         "Source": "cpp-${each.key}-api",
#         "DetailType": $market,
#         "Detail": "$util.escapeJavaScript($input.body)",
#         "EventBusName": "${aws_cloudwatch_event_bus.userplatform_cpp_event_bus_us.name}"
#       }
#     ]
#   }
#   EOF
#   }
# }
#
# # resource "aws_api_gateway_integration_response" "userplatform_cpp_apigateway_s3_integration_response" {
# #   for_each = local.route_path
# #
# #   rest_api_id = aws_api_gateway_rest_api.userplatform_cpp_rest_api.id
# #   resource_id = aws_api_gateway_resource.userplatform_cpp_api_resources[each.key].id
# #   http_method = aws_api_gateway_method.userplatform_cpp_api_method[each.key].http_method
# #   status_code = "200"
# #
# #   depends_on = [
# #     aws_api_gateway_integration.userplatform_cpp_api_integration
# #   ]
# #
# #   response_parameters = {
# #     "method.response.header.x-amz-request-id" = "integration.response.header.x-amz-request-id",
# #     "method.response.header.etag"             = "integration.response.header.ETag"
# #   }
# # }
#
# resource "aws_api_gateway_integration_response" "userplatform_cpp_apigateway_s3_integration_response" {
#   for_each = local.route_path
#
#   rest_api_id = aws_api_gateway_rest_api.userplatform_cpp_rest_api.id
#   resource_id = aws_api_gateway_resource.userplatform_cpp_api_resources[each.key].id
#   http_method = aws_api_gateway_method.userplatform_cpp_api_method[each.key].http_method
#   status_code = "200"
#
#   depends_on = [
#     aws_api_gateway_method_response.userplatform_cpp_apigateway_s3_method_response["us"],
#     aws_api_gateway_method_response.userplatform_cpp_apigateway_s3_method_response["eu"],
#     aws_api_gateway_method_response.userplatform_cpp_apigateway_s3_method_response["ap"]
#   ]
#
#   response_parameters = {
#     "method.response.header.x-amz-request-id" = "integration.response.header.x-amz-request-id",
#     "method.response.header.etag"             = "integration.response.header.ETag"
#   }
#
#   response_templates = {
#     "application/json" = ""
#   }
#
# }
#
#
# resource "aws_api_gateway_method_response" "userplatform_cpp_apigateway_s3_method_response" {
#   for_each = local.route_path
#
#   rest_api_id = aws_api_gateway_rest_api.userplatform_cpp_rest_api.id
#   resource_id = aws_api_gateway_resource.userplatform_cpp_api_resources[each.key].id
#   http_method = aws_api_gateway_method.userplatform_cpp_api_method[each.key].http_method
#   status_code = "200"
#
#   response_parameters = {
#     "method.response.header.x-amz-request-id" = true,
#     "method.response.header.etag"             = true
#   }
#
#   response_models = {
#     "application/json" = "Empty"
#   }
# }
#
# # API Keys
# resource "aws_api_gateway_api_key" "userplatform_cpp_api_key" {
#   for_each = local.route_path
#
#   provider = aws.us
#   name     = "${each.key}-api-key"
#   enabled  = true
# }
#
# # Usage Plans with high rate/burst
# resource "aws_api_gateway_usage_plan" "userplatform_cpp_api_usage_plan" {
#   for_each = local.route_path
#
#   provider = aws.us
#   name     = "${each.key}-usage-plan"
#
#   api_stages {
#     api_id = aws_api_gateway_rest_api.userplatform_cpp_rest_api.id
#     stage  = aws_api_gateway_stage.userplatform_cpp_api_stage.stage_name
#   }
#
#   throttle_settings {
#     rate_limit  = 1000
#     burst_limit = 200
#   }
# }
#
# resource "aws_api_gateway_usage_plan_key" "userplatform_cpp_api_usage_plan_key" {
#   for_each = local.route_path
#
#   provider      = aws.us
#   key_id        = aws_api_gateway_api_key.userplatform_cpp_api_key[each.key].id
#   key_type      = "API_KEY"
#   usage_plan_id = aws_api_gateway_usage_plan.userplatform_cpp_api_usage_plan[each.key].id
# }
#
# resource "aws_cloudwatch_log_group" "userplatform_cpp_api_gateway_logs" {
#   provider          = aws.us
#   name              = "/aws/apigateway/userplatform-cpp-rest-api"
#   retention_in_days = 14
# }
#
#
#
# resource "aws_api_gateway_deployment" "userplatform_cpp_api_deployment" {
#   provider    = aws.us
#   rest_api_id = aws_api_gateway_rest_api.userplatform_cpp_rest_api.id
#
#   depends_on = [
#     aws_api_gateway_method.userplatform_cpp_api_method["us"],
#     aws_api_gateway_method.userplatform_cpp_api_method["eu"],
#     aws_api_gateway_method.userplatform_cpp_api_method["ap"],
#
#     aws_api_gateway_method_response.userplatform_cpp_apigateway_s3_method_response["us"],
#     aws_api_gateway_method_response.userplatform_cpp_apigateway_s3_method_response["eu"],
#     aws_api_gateway_method_response.userplatform_cpp_apigateway_s3_method_response["ap"],
#
#     aws_api_gateway_integration_response.userplatform_cpp_apigateway_s3_integration_response["us"],
#     aws_api_gateway_integration_response.userplatform_cpp_apigateway_s3_integration_response["eu"],
#     aws_api_gateway_integration_response.userplatform_cpp_apigateway_s3_integration_response["ap"]
#   ]
# }
#
#
# # resource "aws_api_gateway_deployment" "userplatform_cpp_api_deployment" {
# #   provider = aws.us
# #
# #   depends_on = [
# #     aws_api_gateway_method.userplatform_cpp_api_method["us"],
# #     aws_api_gateway_method.userplatform_cpp_api_method["eu"],
# #     aws_api_gateway_method.userplatform_cpp_api_method["ap"]
# #   ]
# #
# #
# #   rest_api_id = aws_api_gateway_rest_api.userplatform_cpp_rest_api.id
# # }
#
# resource "aws_api_gateway_stage" "userplatform_cpp_api_stage" {
#   provider      = aws.us
#   stage_name    = "cppv02"
#   rest_api_id   = aws_api_gateway_rest_api.userplatform_cpp_rest_api.id
#   deployment_id = aws_api_gateway_deployment.userplatform_cpp_api_deployment.id
#
#   cache_cluster_enabled = true
#   cache_cluster_size    = "0.5"
#
#   access_log_settings {
#     destination_arn = aws_cloudwatch_log_group.userplatform_cpp_api_gateway_logs.arn
#     format = jsonencode({
#       requestId          = "$context.requestId",
#       sourceIp           = "$context.identity.sourceIp",
#       extendedRequestId  = "$context.extendedRequestId",
#       apiId              = "$context.apiId",
#       caller             = "$context.identity.caller",
#       user               = "$context.identity.user",
#       requestTime        = "$context.requestTime",
#       httpMethod         = "$context.httpMethod",
#       resourcePath       = "$context.resourcePath",
#       status             = "$context.status",
#       protocol           = "$context.protocol",
#       responseLength     = "$context.responseLength"
#       stage              = "$context.stage",
#       userAgent          = "$context.identity.userAgent",
#       integrationStatus  = "$context.integration.status",
#       responseLatency    = "$context.responseLatency",
#       integrationLatency = "$context.integration.latency",
#       errorMessage       = "$context.error.message",
#       errorResponseType  = "$context.error.responseType",
#       requestTimeEpoch   = "$context.requestTimeEpoch"
#     })
#   }
#   xray_tracing_enabled = true
#   depends_on           = [aws_api_gateway_account.userplatform_cpp_api_account_settings]
# }
#
# # Configure Method Settings for Detailed Logging and Caching
# resource "aws_api_gateway_method_settings" "userplatform_cpp_apigateway_method_settings" {
#   rest_api_id = aws_api_gateway_rest_api.userplatform_cpp_rest_api.id
#   stage_name  = aws_api_gateway_stage.userplatform_cpp_api_stage.stage_name
#   method_path = "*/*" # Apply to all methods and resources
#
#   settings {
#     metrics_enabled      = true    # Enable CloudWatch metrics
#     logging_level        = "ERROR" # Set logging level to INFO
#     data_trace_enabled   = true    # Enable data trace logging
#     caching_enabled      = true    # Enable caching
#     cache_ttl_in_seconds = 300     # Set TTL for cache (5 minutes)
#   }
# }
#
# resource "aws_api_gateway_account" "userplatform_cpp_api_account_settings" {
#   provider            = aws.us
#   cloudwatch_role_arn = aws_iam_role.userplatform_cpp_api_gateway_cloudwatch_logging_role.arn
# }